/**
 * JavaCC file
 */
 
options {
  JDK_VERSION = "1.6";
  STATIC = false;
}
PARSER_BEGIN(JCCFunctionsParser)
package parser.jcc;

import ast.*;
import java.util.ArrayList;
import java.util.List;

public class JCCFunctionsParser {
}

PARSER_END(JCCFunctionsParser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| < MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/" >
| < SINGLE_LINE_COMMENT: "//" (~["\n"])* >
}

TOKEN : /* KEYWORDS */
{
  < CLASS: "class" >
| < PUBLIC: "public" >
| < STATIC: "static" >
| < VOID: "void" >
| < MAIN: "main" >
| < EXTENDS: "extends" >
| < IF: "if" >
| < ELSE: "else" >
| < WHILE: "while" >
| < THIS: "this" >
| < NEW: "new" >
| < PRINT: "System.out.println" >
| < INT: "int" >
| < BOOLEAN: "boolean" >
| < STRING: "String" >
| < RETURN: "return" >
}

TOKEN : /* SEPARATORS and OPERATORS*/
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < ASSIGN: "=" >
| < QUESTION: "?" >
| < COLON: ":" >
| < PLUS: "+" >
| < MINUS: "-" >
| < MULT: "*" >
| < AND: "&&" >
| < OR: "||" >
| < SMALLER: "<" >
| < NOT: "!" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < DOT: "." >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
}
	
TOKEN :	/* LITERALS */
{
  < INTEGER_LITERAL: ( <DIGIT> )+ >
| < BOOLEAN_LITERAL: "true" | "false" >
| < IDENTIFIER: <LETTER> (<LETTER> | "_" | <DIGIT>)* >
| < #LETTER: ["A" - "Z", "a" - "z"] >
| < #DIGIT: ["0" - "9"] >
}

String Identifier() : {
  Token i;
}
{
  i = < IDENTIFIER >
  { return i.image; }
}

Type Type() : {
  Token i;
}
{
  LOOKAHEAD(2)
  < INT >
  < LBRACKET >
  < RBRACKET >
  { return new IntArrayType(); }| < INT >
  { return new IntegerType(); }| < BOOLEAN >
  { return new BooleanType(); }
| i = < IDENTIFIER >
  { return new ObjectType(i.image); }}

VarDecl VarDecl(VarDecl.Kind kind) : {
  Type type;
  String name;}
{
  type = Type()
  name = Identifier()
  < SEMICOLON >
  { return new VarDecl(kind, type, name); }}

Expression Expression() : {}{
  {    return null;  }}

Expression PrimaryExpression() : {
  Token t;
  Expression e;}
{
  LOOKAHEAD(2)
  < NEW >
  < INT >
  < LBRACKET >
  e = Expression()
  < RBRACKET >
  { return new NewArray(e); }
| < NEW >
  t = < IDENTIFIER >
  < LPAREN >
  < RPAREN >
  { return new NewObject(t.image); }
| t = < INTEGER_LITERAL >  { return new IntegerLiteral(t.image); }| t = < BOOLEAN_LITERAL >
  { return new BooleanLiteral(t.image); }
| t = < IDENTIFIER >  { return new IdentifierExp(t.image); }| < THIS >  { return new This(); }
| < LPAREN >
  e = Expression()
  < RPAREN >  { return e; }
}
